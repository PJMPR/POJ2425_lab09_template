package com.example;

import java.time.LocalDate;
import java.util.List;

public class MainProgram {

    static List<CarOffer> cars = List.of(
            new CarOffer(150000, 2000, LocalDate.now().minusDays(5), "Sprzedam Alfe", 5000.00),
            new CarOffer(250000, 1999, LocalDate.now().minusDays(0), "Sprzedam Opla", 25000.00),
            new CarOffer(110000, 2004, LocalDate.now().minusDays(5), "Sprzedam Opla", 12000.00),
            new CarOffer(350000, 2019, LocalDate.now().minusDays(9), "Sprzedam Opla", 15000.00),
            new CarOffer(140000, 2000, LocalDate.now().minusDays(11), "Opel", 14000.00)
    );

    public static void main(String[] args){

        /**
         * Zadanie 1:
         * Utw√≥rz klasƒô SearchSettings przechowujƒÖcƒÖ kryteria wyszukiwania og≈Çosze≈Ñ:
         * - rocznik: od - do
         * - przebieg: od - do
         * - cena: od - do
         * - s≈Çowo w tytule
         * - data dodania og≈Çoszenia: od - do
         */
//        SearchSettings searchSettings = new SearchSettings();
//        searchSettings.setDateFrom(LocalDate.now().minusDays(10));
//        searchSettings.setMilleageTo(200000);
//        searchSettings.setPriceFrom(10000.0);
//        searchSettings.setPriceTo(16000.0);
//        searchSettings.setWord("Sprzedam");
//        searchSettings.setYearFrom(2000);

        /**
         * Zadanie 2: Filtrowanie po roczniku
         */
//        Filter yearFilter = new SearchByYearFilter();
//        yearFilter.setCarOffers(cars);
//        yearFilter.setSearchSettings(searchSettings);
//        if(yearFilter.canFilter()){
//            List<CarOffer> filteredByYearCarsOffers = yearFilter.filter();
//            printOffers(filteredByYearCarsOffers);
//            if(filteredByYearCarsOffers.size() > 4){
//                System.out.println("‚ùå [B≈ÅƒÑD] Filtrowanie po roczniku nie dzia≈Ça poprawnie - oczekiwano maksymalnie 4 wynik√≥w");
//                return;
//            } else {
//                System.out.println("‚úÖ [OK] Filtrowanie po roczniku dzia≈Ça poprawnie");
//            }
//        }

        /**
         * Zadanie 3: Filtrowanie po cenie
         */
//        Filter priceFilter = new SearchByPriceFilter();
//        priceFilter.setCarOffers(cars);
//        priceFilter.setSearchSettings(searchSettings);
//        if(priceFilter.canFilter()){
//            List<CarOffer> filteredCarsOffers = priceFilter.filter();
//            printOffers(filteredCarsOffers);
//            if(filteredCarsOffers.size() > 3){
//                System.out.println("‚ùå [B≈ÅƒÑD] Filtrowanie po cenie nie dzia≈Ça poprawnie - oczekiwano maksymalnie 3 wynik√≥w");
//                return;
//            } else {
//                System.out.println("‚úÖ [OK] Filtrowanie po cenie dzia≈Ça poprawnie");
//            }
//        }

        /**
         * Zadanie 3: Filtrowanie po s≈Çowie kluczowym
         */
//        Filter wordFilter = new SearchByWordFilter();
//        wordFilter.setCarOffers(cars);
//        wordFilter.setSearchSettings(searchSettings);
//        if(wordFilter.canFilter()){
//            List<CarOffer> filteredCarsOffers = wordFilter.filter();
//            printOffers(filteredCarsOffers);
//            if(filteredCarsOffers.size() > 4){
//                System.out.println("‚ùå [B≈ÅƒÑD] Filtrowanie po s≈Çowie kluczowym nie dzia≈Ça poprawnie - oczekiwano maksymalnie 4 wynik√≥w");
//                return;
//            } else {
//                System.out.println("‚úÖ [OK] Filtrowanie po s≈Çowie kluczowym dzia≈Ça poprawnie");
//            }
//        }

        /**
         * Zadanie 3: Filtrowanie po przebiegu
         */
//        Filter milleageFilter = new SearchByMillageFilter();
//        milleageFilter.setCarOffers(cars);
//        milleageFilter.setSearchSettings(searchSettings);
//        if(milleageFilter.canFilter()){
//            List<CarOffer> filteredCarsOffers = milleageFilter.filter();
//            printOffers(filteredCarsOffers);
//            if(filteredCarsOffers.size() > 3){
//                System.out.println("‚ùå [B≈ÅƒÑD] Filtrowanie po przebiegu nie dzia≈Ça poprawnie - oczekiwano maksymalnie 3 wynik√≥w");
//                return;
//            } else {
//                System.out.println("‚úÖ [OK] Filtrowanie po przebiegu dzia≈Ça poprawnie");
//            }
//        }

        /**
         * Zadanie 3: Filtrowanie po dacie dodania
         */
//        Filter dateFilter = new SearchByDateFilter();
//        dateFilter.setCarOffers(cars);
//        dateFilter.setSearchSettings(searchSettings);
//        if(dateFilter.canFilter()){
//            List<CarOffer> filteredCarsOffers = dateFilter.filter();
//            printOffers(filteredCarsOffers);
//            if(filteredCarsOffers.size() > 4){
//                System.out.println("‚ùå [B≈ÅƒÑD] Filtrowanie po dacie nie dzia≈Ça poprawnie - oczekiwano maksymalnie 4 wynik√≥w");
//                return;
//            } else {
//                System.out.println("‚úÖ [OK] Filtrowanie po dacie dzia≈Ça poprawnie");
//            }
//        }

        /**
         * Zadanie 4: Filtrowanie zbiorcze z u≈ºyciem klasy Searcher
         */
//        Searcher searcher = new Searcher();
//        searcher.addFilter(wordFilter);
//        searcher.addFilter(priceFilter);
//        searcher.addFilter(milleageFilter);
//        searcher.addFilter(dateFilter);

//        List<CarOffer> filteredCarsOffers = searcher.filter(cars, searchSettings);
//        printOffers(filteredCarsOffers);

//        if(filteredCarsOffers.size() != 1){
//            System.out.println("‚ùå [B≈ÅƒÑD] Filtrowanie zbiorcze nie dzia≈Ça poprawnie - oczekiwano dok≈Çadnie 1 wyniku");
//        } else {
//            System.out.println("‚úÖ [OK] Filtrowanie zbiorcze dzia≈Ça poprawnie");
//        }

//        System.out.println("üèÅ Koniec test√≥w");
    }

    /**
     * Pomocnicza metoda do wy≈õwietlania listy og≈Çosze≈Ñ w czytelnej formie.
     * @param offers lista og≈Çosze≈Ñ do wy≈õwietlenia
     */
    public static void printOffers(List<CarOffer> offers) {
        if (offers == null || offers.isEmpty()) {
            System.out.println("Brak pasujƒÖcych og≈Çosze≈Ñ.");
            return;
        }

        System.out.println("\n--- Lista og≈Çosze≈Ñ ---");
        for (CarOffer offer : offers) {
            System.out.printf("Tytu≈Ç: %s | Cena: %.2f z≈Ç | Rocznik: %d | Przebieg: %d km | Data: %s\n",
                    offer.getTitle(),
                    offer.getPrice(),
                    offer.getYear(),
                    offer.getMilleage(),
                    offer.getDate().toString()
            );
        }
        System.out.println("-----------------------\n");
    }
}

